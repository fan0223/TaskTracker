import { ICallback, TFunction } from '../../types';
export declare const async: {
    each: <T>(collection: Record<string, T> | T[], iteratee: (item: T, key: number | string, callback: ICallback<void>) => void, callback: ICallback<void>) => void;
    eachIn: <T_1>(collection: Record<string, T_1>, iteratee: (item: T_1, key: string, callback: ICallback<void>) => void, callback: ICallback<void>) => void;
    eachOf: <T_2>(collection: T_2[], iteratee: (item: T_2, key: number, callback: ICallback<void>) => void, callback: ICallback<void>) => void;
    waterfall: <T_3>(tasks: TFunction[], callback: ICallback<T_3>) => void;
};
