"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Worker = void 0;
const ticker_1 = require("../ticker/ticker");
const events_1 = require("../events/events");
const power_manager_1 = require("../power-manager/power-manager");
const panic_error_1 = require("../errors/panic.error");
class Worker {
    constructor(managed, timeout = 1000) {
        this.ticker = null;
        this.powerManager = null;
        this.getTicker = () => {
            if (!this.ticker) {
                throw new panic_error_1.PanicError(`Expected an instance of Ticker`);
            }
            return this.ticker;
        };
        this.onTick = () => {
            this.work((err) => {
                if (err)
                    throw err;
                this.getTicker().nextTick();
            });
        };
        this.run = () => {
            if (this.managed) {
                throw new panic_error_1.PanicError('You can not run a managed worker');
            }
            const powerManager = this.getPowerManager();
            powerManager.goingUp();
            const ticker = this.getTicker();
            ticker.nextTick();
            powerManager.commit();
        };
        this.quit = (cb) => {
            if (!this.managed) {
                const powerManager = this.getPowerManager();
                powerManager.goingDown();
                const ticker = this.getTicker();
                ticker.on(events_1.events.DOWN, () => {
                    powerManager.commit();
                    cb();
                });
                ticker.quit();
            }
            else
                cb();
        };
        this.managed = managed;
        if (!managed) {
            this.ticker = new ticker_1.Ticker(this.onTick, timeout);
            this.powerManager = new power_manager_1.PowerManager();
        }
    }
    getPowerManager() {
        if (!this.powerManager) {
            throw new panic_error_1.PanicError('Expected an instance of PowerManager');
        }
        return this.powerManager;
    }
}
exports.Worker = Worker;
//# sourceMappingURL=worker.js.map