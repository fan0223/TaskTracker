"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LuaScripts = void 0;
const empty_callback_reply_error_1 = require("../errors/empty-callback-reply.error");
const redis_client_error_1 = require("./errors/redis-client.error");
const async_1 = require("../async/async");
class LuaScripts {
    constructor() {
        this.isLoaded = false;
        this.scripts = new Map();
    }
    hasScript(name) {
        return this.scripts.has(name);
    }
    addScript(name, content) {
        if (this.hasScript(name))
            return false;
        this.scripts.set(name, { content });
        this.isLoaded = false;
        return true;
    }
    loadScripts(redisClient, cb) {
        if (!this.isLoaded) {
            const tasks = [];
            this.scripts.forEach((script) => tasks.push((cb) => redisClient.loadScript(script.content, (err, sha) => {
                if (err)
                    cb(err);
                else if (!sha)
                    cb(new empty_callback_reply_error_1.EmptyCallbackReplyError());
                else {
                    script.id = sha;
                    cb();
                }
            })));
            async_1.async.waterfall(tasks, (err) => {
                if (err)
                    cb(err);
                else {
                    this.isLoaded = true;
                    cb();
                }
            });
        }
        else
            cb();
    }
    getScriptId(name) {
        var _a;
        const { id } = (_a = this.scripts.get(name)) !== null && _a !== void 0 ? _a : {};
        if (!id) {
            throw new redis_client_error_1.RedisClientError(`ID of script [${name}] is missing`);
        }
        return id;
    }
}
exports.LuaScripts = LuaScripts;
//# sourceMappingURL=lua-scripts.js.map