import { IRequiredConfig, TQueueParams, TQueueRateLimit } from '../../../types';
import { RedisClient } from 'redis-smq-common';
import { ICallback, ICompatibleLogger } from 'redis-smq-common/dist/types';
export declare class QueueRateLimit {
    protected redisClient: RedisClient;
    protected logger: ICompatibleLogger;
    protected config: IRequiredConfig;
    constructor(config: IRequiredConfig, redisClient: RedisClient, logger: ICompatibleLogger);
    clear(queue: string | TQueueParams, cb: ICallback<void>): void;
    set(queue: string | TQueueParams, rateLimit: TQueueRateLimit, cb: ICallback<void>): void;
    get(queue: string | TQueueParams, cb: ICallback<TQueueRateLimit | null>): void;
    static hasExceeded(redisClient: RedisClient, queue: TQueueParams, rateLimit: TQueueRateLimit, cb: ICallback<boolean>): void;
    static get(config: IRequiredConfig, redisClient: RedisClient, queue: string | TQueueParams, cb: ICallback<TQueueRateLimit | null>): void;
}
