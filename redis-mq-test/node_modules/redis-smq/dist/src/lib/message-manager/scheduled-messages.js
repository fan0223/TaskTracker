"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledMessages = void 0;
const redis_keys_1 = require("../../common/redis-keys/redis-keys");
const sorted_set_1 = require("./message-storage/sorted-set");
class ScheduledMessages extends sorted_set_1.SortedSet {
    delete(messageId, cb) {
        const { keyScheduledMessages, keyScheduledMessageWeight } = redis_keys_1.redisKeys.getMainKeys();
        this.deleteMessage({
            keyMessages: keyScheduledMessages,
            keyMessagesWeight: keyScheduledMessageWeight,
        }, { messageId }, (err) => {
            if (err)
                cb(err);
            else {
                this.logger.info(`Scheduled message (ID ${messageId}) has been deleted`);
                cb();
            }
        });
    }
    purge(cb) {
        const { keyScheduledMessageWeight, keyScheduledMessages } = redis_keys_1.redisKeys.getMainKeys();
        this.purgeMessages({
            keyMessages: keyScheduledMessages,
            keyMessagesWeight: keyScheduledMessageWeight,
        }, (err) => {
            if (err)
                cb(err);
            else {
                this.logger.info(`Scheduled messages have been deleted`);
                cb();
            }
        });
    }
    list(skip, take, cb) {
        const { keyScheduledMessageWeight, keyScheduledMessages } = redis_keys_1.redisKeys.getMainKeys();
        this.fetchMessages({
            keyMessages: keyScheduledMessages,
            keyMessagesWeight: keyScheduledMessageWeight,
        }, skip, take, cb);
    }
    count(cb) {
        const { keyScheduledMessageWeight, keyScheduledMessages } = redis_keys_1.redisKeys.getMainKeys();
        this.countMessages({
            keyMessages: keyScheduledMessages,
            keyMessagesWeight: keyScheduledMessageWeight,
        }, cb);
    }
}
exports.ScheduledMessages = ScheduledMessages;
//# sourceMappingURL=scheduled-messages.js.map