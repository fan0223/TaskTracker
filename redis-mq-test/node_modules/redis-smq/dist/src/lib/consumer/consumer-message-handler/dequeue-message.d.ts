import { TQueueParams, TQueueRateLimit } from '../../../../types';
import { redisKeys } from '../../../common/redis-keys/redis-keys';
import { RedisClient, Ticker } from 'redis-smq-common';
import { MessageHandler } from './message-handler';
import { ICallback } from 'redis-smq-common/dist/types';
export declare class DequeueMessage {
    protected redisClient: RedisClient;
    protected queue: TQueueParams;
    protected consumerId: string;
    protected redisKeys: ReturnType<typeof redisKeys['getQueueConsumerKeys']>;
    protected queueRateLimit: TQueueRateLimit | null;
    protected ticker: Ticker;
    protected messageHandler: MessageHandler;
    protected priorityQueuing: boolean;
    constructor(messageHandler: MessageHandler, redisClient: RedisClient);
    protected dequeueMessageWithPriority(cb: ICallback<string | null>): void;
    protected waitForMessage(cb: ICallback<string | null>): void;
    protected dequeueMessage(cb: ICallback<string | null>): void;
    dequeue(): void;
    run(cb: ICallback<void>): void;
    quit(cb: ICallback<void>): void;
}
