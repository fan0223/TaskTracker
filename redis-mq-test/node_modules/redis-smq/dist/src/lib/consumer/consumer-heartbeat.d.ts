/// <reference types="node" />
import { TConsumerHeartbeat } from '../../../types';
import { RedisClient, Ticker } from 'redis-smq-common';
import { EventEmitter } from 'events';
import { Consumer } from './consumer';
import { ICallback, IRedisClientMulti } from 'redis-smq-common/dist/types';
export declare class ConsumerHeartbeat extends EventEmitter {
    protected static readonly heartbeatTTL: number;
    protected redisClient: RedisClient;
    protected ticker: Ticker;
    protected keyHeartbeats: string;
    protected keyHeartbeatTimestamps: string;
    protected consumer: Consumer;
    constructor(consumer: Consumer, redisClient: RedisClient);
    protected getPayload(): TConsumerHeartbeat;
    protected onTick(): void;
    quit(cb: ICallback<void>): void;
    static validateHeartbeatsOf(redisClient: RedisClient, consumerIds: string[], cb: ICallback<Record<string, boolean>>): void;
    static getValidHeartbeats(redisClient: RedisClient, cb: ICallback<{
        consumerId: string;
        payload: string;
    }[]>): void;
    static getValidHeartbeatIds(redisClient: RedisClient, cb: ICallback<string[]>): void;
    static getExpiredHeartbeatIds(redisClient: RedisClient, cb: ICallback<string[]>): void;
    static handleExpiredHeartbeatId(consumerId: string | string[], multi: IRedisClientMulti): void;
}
