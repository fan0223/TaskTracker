/// <reference types="node" />
import { EventEmitter } from 'events';
import { IConfig, IRequiredConfig } from '../../types';
import { PowerManager, RedisClient } from 'redis-smq-common';
import { ICallback, ICompatibleLogger, TFunction, TUnaryFunction } from 'redis-smq-common/dist/types';
export declare abstract class Base extends EventEmitter {
    protected readonly id: string;
    protected readonly powerManager: PowerManager;
    protected sharedRedisClient: RedisClient | null;
    protected logger: ICompatibleLogger;
    protected config: IRequiredConfig;
    constructor(config: IConfig);
    protected setUpSharedRedisClient: (cb: ICallback<void>) => void;
    protected tearDownSharedRedisClient: (cb: ICallback<void>) => void;
    protected registerEventsHandlers(): void;
    protected goingUp(): TFunction[];
    protected up(cb?: ICallback<boolean>): void;
    protected goingDown(): TUnaryFunction<ICallback<void>>[];
    protected down(cb?: ICallback<boolean>): void;
    protected getSharedRedisClient(): RedisClient;
    handleError(err: Error): void;
    run(cb?: ICallback<boolean>): void;
    shutdown(cb?: ICallback<boolean>): void;
    isRunning(): boolean;
    isGoingUp(): boolean;
    isGoingDown(): boolean;
    isUp(): boolean;
    isDown(): boolean;
    getId(): string;
    getConfig(): IRequiredConfig;
}
