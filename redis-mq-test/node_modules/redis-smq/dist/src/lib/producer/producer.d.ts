import { IConfig, IEventListener } from '../../../types';
import { Message } from '../message/message';
import { Base } from '../base';
import { RedisClient } from 'redis-smq-common';
import { ICallback, TUnaryFunction } from 'redis-smq-common/dist/types';
export declare class Producer extends Base {
    protected eventListeners: IEventListener[];
    constructor(config?: IConfig);
    protected initEventListeners: (cb: ICallback<void>) => void;
    protected goingUp(): TUnaryFunction<ICallback<void>>[];
    protected goingDown(): TUnaryFunction<ICallback<void>>[];
    protected enqueue(redisClient: RedisClient, message: Message, cb: ICallback<void>): void;
    produce(message: Message, cb: ICallback<void>): void;
}
