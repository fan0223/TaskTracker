"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base = void 0;
const uuid_1 = require("uuid");
const events_1 = require("events");
const events_2 = require("../common/events/events");
const configuration_1 = require("../config/configuration");
const redis_smq_common_1 = require("redis-smq-common");
class Base extends events_1.EventEmitter {
    constructor(config) {
        super();
        this.sharedRedisClient = null;
        this.setUpSharedRedisClient = (cb) => {
            (0, redis_smq_common_1.createClientInstance)(this.config.redis, (err, client) => {
                if (err)
                    cb(err);
                else if (!client)
                    cb(new redis_smq_common_1.errors.EmptyCallbackReplyError());
                else {
                    this.sharedRedisClient = client;
                    cb();
                }
            });
        };
        this.tearDownSharedRedisClient = (cb) => {
            if (this.sharedRedisClient) {
                this.sharedRedisClient.halt(() => {
                    this.sharedRedisClient = null;
                    cb();
                });
            }
            else
                cb();
        };
        this.id = (0, uuid_1.v4)();
        this.powerManager = new redis_smq_common_1.PowerManager(false);
        this.config = (0, configuration_1.getConfiguration)(config);
        this.logger = redis_smq_common_1.logger.getNamespacedLogger(this.config.logger, `${this.constructor.name.toLowerCase()}:${this.id}`);
        this.registerEventsHandlers();
    }
    registerEventsHandlers() {
        this.on(events_2.events.GOING_UP, () => this.logger.info(`Going up...`));
        this.on(events_2.events.UP, () => this.logger.info(`Up and running...`));
        this.on(events_2.events.GOING_DOWN, () => this.logger.info(`Going down...`));
        this.on(events_2.events.DOWN, () => this.logger.info(`Down.`));
        this.on(events_2.events.ERROR, (err) => this.handleError(err));
    }
    goingUp() {
        return [this.setUpSharedRedisClient];
    }
    up(cb) {
        this.powerManager.commit();
        this.emit(events_2.events.UP);
        cb && cb(null, true);
    }
    goingDown() {
        return [this.tearDownSharedRedisClient];
    }
    down(cb) {
        this.powerManager.commit();
        this.emit(events_2.events.DOWN);
        cb && cb(null, true);
    }
    getSharedRedisClient() {
        if (!this.sharedRedisClient)
            throw new redis_smq_common_1.errors.PanicError('Expected an instance of RedisClient');
        return this.sharedRedisClient;
    }
    handleError(err) {
        if (this.powerManager.isGoingUp() || this.powerManager.isRunning()) {
            throw err;
        }
    }
    run(cb) {
        if (this.powerManager.isGoingDown()) {
            this.once(events_2.events.DOWN, () => this.run(cb));
        }
        else {
            const r = this.powerManager.goingUp();
            if (r) {
                this.emit(events_2.events.GOING_UP);
                const tasks = this.goingUp();
                redis_smq_common_1.async.waterfall(tasks, (err) => {
                    if (err) {
                        if (cb)
                            cb(err);
                        else
                            this.emit(events_2.events.ERROR, err);
                    }
                    else
                        this.up(cb);
                });
            }
            else {
                cb && cb(null, r);
            }
        }
    }
    shutdown(cb) {
        if (this.powerManager.isGoingUp()) {
            this.once(events_2.events.UP, () => this.shutdown(cb));
        }
        else {
            const r = this.powerManager.goingDown();
            if (r) {
                this.emit(events_2.events.GOING_DOWN);
                const tasks = this.goingDown();
                redis_smq_common_1.async.waterfall(tasks, () => {
                    this.down(cb);
                });
            }
            else
                cb && cb(null, r);
        }
    }
    isRunning() {
        return this.powerManager.isRunning();
    }
    isGoingUp() {
        return this.powerManager.isGoingUp();
    }
    isGoingDown() {
        return this.powerManager.isGoingDown();
    }
    isUp() {
        return this.powerManager.isUp();
    }
    isDown() {
        return this.powerManager.isDown();
    }
    getId() {
        return this.id;
    }
    getConfig() {
        return this.config;
    }
}
exports.Base = Base;
//# sourceMappingURL=base.js.map