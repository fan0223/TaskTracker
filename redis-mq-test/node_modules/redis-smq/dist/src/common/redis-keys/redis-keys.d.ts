import { TQueueParams } from '../../../types';
export declare const redisKeys: {
    getNamespaceKeys(ns: string): {
        keyNsQueues: string;
        keyQueues: string;
        keyProcessingQueues: string;
        keyHeartbeats: string;
        keyHeartbeatConsumerWeight: string;
        keyScheduledMessages: string;
        keyScheduledMessageWeight: string;
        keyLockConsumerWorkersRunner: string;
        keyDelayedMessages: string;
        keyRequeueMessages: string;
        keyNamespaces: string;
        keyQueueSettingsRateLimit: string;
        keyQueueSettingsPriorityQueuing: string;
    };
    getQueueKeys(queueParams: TQueueParams): {
        keyQueuePending: string;
        keyQueueDL: string;
        keyQueueProcessingQueues: string;
        keyQueueAcknowledged: string;
        keyQueuePendingPriorityMessageWeight: string;
        keyQueuePendingPriorityMessages: string;
        keyQueueConsumers: string;
        keyQueueRateLimitCounter: string;
        keyQueueSettings: string;
        keyNsQueues: string;
        keyQueues: string;
        keyProcessingQueues: string;
        keyHeartbeats: string;
        keyHeartbeatConsumerWeight: string;
        keyScheduledMessages: string;
        keyScheduledMessageWeight: string;
        keyLockConsumerWorkersRunner: string;
        keyDelayedMessages: string;
        keyRequeueMessages: string;
        keyNamespaces: string;
        keyQueueSettingsRateLimit: string;
        keyQueueSettingsPriorityQueuing: string;
    };
    getConsumerKeys(instanceId: string): {
        keyConsumerQueues: string;
        keyQueues: string;
        keyProcessingQueues: string;
        keyHeartbeats: string;
        keyHeartbeatConsumerWeight: string;
        keyScheduledMessages: string;
        keyScheduledMessageWeight: string;
        keyLockConsumerWorkersRunner: string;
        keyDelayedMessages: string;
        keyRequeueMessages: string;
        keyNamespaces: string;
        keyQueueSettingsRateLimit: string;
        keyQueueSettingsPriorityQueuing: string;
    };
    getQueueConsumerKeys(queueParams: TQueueParams, instanceId: string): {
        keyQueueProcessing: string;
        keyConsumerQueues: string;
        keyQueues: string;
        keyProcessingQueues: string;
        keyHeartbeats: string;
        keyHeartbeatConsumerWeight: string;
        keyScheduledMessages: string;
        keyScheduledMessageWeight: string;
        keyLockConsumerWorkersRunner: string;
        keyDelayedMessages: string;
        keyRequeueMessages: string;
        keyNamespaces: string;
        keyQueueSettingsRateLimit: string;
        keyQueueSettingsPriorityQueuing: string;
        keyQueuePending: string;
        keyQueueDL: string;
        keyQueueProcessingQueues: string;
        keyQueueAcknowledged: string;
        keyQueuePendingPriorityMessageWeight: string;
        keyQueuePendingPriorityMessages: string;
        keyQueueConsumers: string;
        keyQueueRateLimitCounter: string;
        keyQueueSettings: string;
        keyNsQueues: string;
    };
    getMainKeys(): Record<"keyQueues" | "keyProcessingQueues" | "keyHeartbeats" | "keyHeartbeatConsumerWeight" | "keyScheduledMessages" | "keyScheduledMessageWeight" | "keyLockConsumerWorkersRunner" | "keyDelayedMessages" | "keyRequeueMessages" | "keyNamespaces" | "keyQueueSettingsRateLimit" | "keyQueueSettingsPriorityQueuing", string>;
    validateNamespace(ns: string): string;
    validateRedisKey(key?: string): string;
};
