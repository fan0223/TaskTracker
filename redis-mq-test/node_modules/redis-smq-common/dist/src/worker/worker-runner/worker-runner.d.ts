/// <reference types="node" />
import { ICallback, ICompatibleLogger } from '../../../types';
import { EventEmitter } from 'events';
import { RedisClient } from '../../redis-client/redis-client';
import { WorkerPool } from './worker-pool';
import { Worker } from '../worker';
export declare class WorkerRunner extends EventEmitter {
    private readonly powerManager;
    private readonly ticker;
    private readonly lockManager;
    private readonly redisClient;
    private readonly logger;
    private readonly workerPool;
    constructor(redisClient: RedisClient, keyLock: string, workerPool: WorkerPool, logger: ICompatibleLogger);
    private onTick;
    private clearWorkerPool;
    private stopTicker;
    private releaseLock;
    addWorker(instance: Worker): void;
    run: () => void;
    quit: (cb: ICallback<void>) => void;
}
