"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const bunyan_1 = require("bunyan");
const logger_error_1 = require("./logger.error");
const noop = () => void 0;
const dummyLogger = {
    debug: noop,
    warn: noop,
    info: noop,
    error: noop,
};
let loggerInstance = null;
function createDefaultLogger(cfg) {
    var _a;
    return (0, bunyan_1.createLogger)(Object.assign(Object.assign({}, ((_a = cfg.options) !== null && _a !== void 0 ? _a : {})), { name: 'redis-smq' }));
}
function reset() {
    loggerInstance = null;
}
function setLogger(logger) {
    if (loggerInstance) {
        throw new logger_error_1.LoggerError('Logger has been already initialized.');
    }
    loggerInstance = logger;
}
function getLogger(cfg) {
    if (!cfg.enabled) {
        return dummyLogger;
    }
    if (!loggerInstance) {
        loggerInstance = createDefaultLogger(cfg);
    }
    return loggerInstance;
}
function getNamespacedLogger(cfg, namespace) {
    const instance = getLogger(cfg);
    if (!cfg.enabled) {
        return instance;
    }
    const wrap = (key) => (message, ...params) => {
        const msg = typeof message === 'string' ? `[${namespace}] ${message}` : message;
        return instance[key](msg, ...params);
    };
    return {
        info: wrap('info'),
        warn: wrap('warn'),
        debug: wrap('debug'),
        error: wrap('error'),
    };
}
exports.logger = {
    getLogger,
    getNamespacedLogger,
    setLogger,
    reset,
};
//# sourceMappingURL=logger.js.map