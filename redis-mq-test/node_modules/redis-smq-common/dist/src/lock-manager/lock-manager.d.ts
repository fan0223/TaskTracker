/// <reference types="node" />
import { ICallback } from '../../types';
import { RedisClient } from '../redis-client/redis-client';
export declare enum ELockStatus {
    unlocked = 0,
    locking = 1,
    locked = 2,
    releasing = 3,
    extending = 4,
    extended = 5
}
export declare enum ELuaScript {
    RELEASE_LOCK = "RELEASE_LOCK",
    EXTEND_LOCK = "EXTEND_LOCK"
}
export declare class LockManager {
    protected readonly lockId: string;
    protected readonly lockKey: string;
    protected readonly retryOnFail: boolean;
    protected readonly ttl: number;
    protected readonly redisClient: RedisClient;
    protected readonly autoExtend: boolean;
    protected status: ELockStatus;
    protected lockingTimer: NodeJS.Timeout | null;
    protected autoExtendTimer: NodeJS.Timeout | null;
    protected throwExceptions: boolean;
    constructor(redisClient: RedisClient, lockKey: string, ttl: number, retryOnFail?: boolean, autoExtend?: boolean, throwExceptions?: boolean);
    protected resetTimers(): void;
    protected setUnlocked(): void;
    protected setLocked(): void;
    protected setExtended(): void;
    protected extend(cb: ICallback<void>): void;
    protected runAutoExtendTimer(): void;
    acquireLock(cb: ICallback<void>): void;
    extendLock(cb: ICallback<void>): void;
    releaseLock(cb: ICallback<void>): void;
    acquireOrExtend(cb: ICallback<ELockStatus>): void;
    isLocked(): boolean;
    isReleased(): boolean;
    getId(): string;
}
