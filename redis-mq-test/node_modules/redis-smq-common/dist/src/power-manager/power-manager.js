"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PowerManager = void 0;
const power_manager_error_1 = require("./power-manager.error");
var TStates;
(function (TStates) {
    TStates[TStates["UP"] = 0] = "UP";
    TStates[TStates["DOWN"] = 1] = "DOWN";
})(TStates || (TStates = {}));
class PowerManager {
    constructor(throwExceptionOnError = true) {
        this.state = TStates.DOWN;
        this.pendingState = null;
        this.throwExceptionOnError = throwExceptionOnError;
    }
    switchState(s) {
        if (this.pendingState !== null) {
            if (this.throwExceptionOnError) {
                throw new power_manager_error_1.PowerManagerError('Can not switch state while another state transition is in progress.');
            }
            return false;
        }
        if (s === this.state) {
            if (this.throwExceptionOnError) {
                throw new power_manager_error_1.PowerManagerError('Can not switch to the same current state.');
            }
            return false;
        }
        this.pendingState = s;
        return true;
    }
    isUp() {
        return this.state === TStates.UP;
    }
    isDown() {
        return this.state === TStates.DOWN;
    }
    isGoingUp() {
        return this.pendingState === TStates.UP;
    }
    isGoingDown() {
        return this.pendingState === TStates.DOWN;
    }
    isRunning() {
        return this.isUp() && !this.pendingState;
    }
    goingUp() {
        return this.switchState(TStates.UP);
    }
    goingDown() {
        return this.switchState(TStates.DOWN);
    }
    commit() {
        if (this.pendingState === null) {
            throw new power_manager_error_1.PowerManagerError(`Expected a pending state`);
        }
        this.state = this.pendingState;
        this.pendingState = null;
    }
    rollback() {
        if (this.pendingState === null) {
            throw new power_manager_error_1.PowerManagerError(`Expected a pending state`);
        }
        this.pendingState = null;
    }
}
exports.PowerManager = PowerManager;
//# sourceMappingURL=power-manager.js.map