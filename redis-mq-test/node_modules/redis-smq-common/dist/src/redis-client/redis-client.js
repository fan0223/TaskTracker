"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClient = exports.ELuaScriptName = void 0;
const events_1 = require("events");
const lua_scripts_1 = require("./lua-scripts");
const redis_client_error_1 = require("./errors/redis-client.error");
const empty_callback_reply_error_1 = require("../errors/empty-callback-reply.error");
const fs = require("fs");
var ELuaScriptName;
(function (ELuaScriptName) {
    ELuaScriptName["LPOPRPUSH"] = "LPOPRPUSH";
    ELuaScriptName["ZPOPHGETRPUSH"] = "ZPOPHGETRPUSH";
    ELuaScriptName["LPOPRPUSHEXTRA"] = "LPOPRPUSHEXTRA";
})(ELuaScriptName = exports.ELuaScriptName || (exports.ELuaScriptName = {}));
class RedisClient extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        this.connectionClosed = true;
    }
    validateRedisVersion(major, feature = 0, minor = 0) {
        if (!RedisClient.redisServerVersion)
            throw new redis_client_error_1.RedisClientError('Unknown Redis server version.');
        return (RedisClient.redisServerVersion[0] > major ||
            (RedisClient.redisServerVersion[0] === major &&
                RedisClient.redisServerVersion[1] >= feature &&
                RedisClient.redisServerVersion[2] >= minor));
    }
    sscanFallback(key, cb) {
        if (this.validateRedisVersion(2, 8))
            this.sscan(key, {}, cb);
        else
            this.smembers(key, cb);
    }
    zpophgetrpush(source, sourceHash, destination, cb) {
        this.runScript(ELuaScriptName.ZPOPHGETRPUSH, [source, sourceHash, destination], [], (err, res) => {
            if (err)
                cb(err);
            else
                cb(null, typeof res === 'string' ? res : null);
        });
    }
    lpoprpushextra(source, destination, listSize, expire, cb) {
        this.runScript(ELuaScriptName.LPOPRPUSHEXTRA, [source, destination], [listSize, expire], (err, res) => {
            if (err)
                cb(err);
            else
                cb(null, typeof res === 'string' ? res : null);
        });
    }
    lpoprpush(source, destination, cb) {
        if (this.validateRedisVersion(6, 2)) {
            this.lmove(source, destination, 'LEFT', 'RIGHT', cb);
        }
        else {
            this.runScript(ELuaScriptName.LPOPRPUSH, [source, destination], [], (err, res) => {
                if (err)
                    cb(err);
                else
                    cb(null, typeof res === 'string' ? res : null);
            });
        }
    }
    updateServerVersion(cb) {
        if (!RedisClient.redisServerVersion) {
            this.getInfo((err, res) => {
                if (err)
                    cb(err);
                else if (!res)
                    cb(new empty_callback_reply_error_1.EmptyCallbackReplyError());
                else {
                    RedisClient.redisServerVersion = res
                        .split('\r\n')[1]
                        .split(':')[1]
                        .split('.')
                        .map((i) => Number(i));
                    cb();
                }
            });
        }
        else
            cb();
    }
    loadScripts(cb) {
        RedisClient.luaScripts.loadScripts(this, cb);
    }
    runScript(scriptName, keys, args, cb) {
        const sha = RedisClient.luaScripts.getScriptId(scriptName);
        this.evalsha(sha, [keys.length, ...keys, ...args], (err, res) => {
            if (err)
                cb(err);
            else
                cb(null, res);
        });
    }
    static addScript(name, content) {
        if (this.luaScripts.hasScript(name)) {
            throw new redis_client_error_1.RedisClientError(`A script with name [${name}] already exists`);
        }
        this.luaScripts.addScript(name, content);
    }
}
exports.RedisClient = RedisClient;
RedisClient.redisServerVersion = null;
RedisClient.scriptsLoaded = false;
RedisClient.luaScripts = new lua_scripts_1.LuaScripts();
RedisClient.addScript(ELuaScriptName.ZPOPHGETRPUSH, fs.readFileSync(`${__dirname}/lua/zpophgetrpush.lua`).toString());
RedisClient.addScript(ELuaScriptName.LPOPRPUSH, fs.readFileSync(`${__dirname}/lua/lpoprpush.lua`).toString());
RedisClient.addScript(ELuaScriptName.LPOPRPUSHEXTRA, fs.readFileSync(`${__dirname}/lua/lpoprpushextra.lua`).toString());
//# sourceMappingURL=redis-client.js.map