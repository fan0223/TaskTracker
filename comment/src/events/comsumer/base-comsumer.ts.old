import { Consumer, Message } from 'redis-smq'
import { Subjects, CommentCreatedEvent } from '@fan-todo/common';
import { ICallback } from 'redis-smq-common/dist/types';

interface Event {
  subject: Subjects,
  data: any
}
abstract class CustomComsumer<T extends Event> {
  abstract queueName: T["subject"]
  abstract messageHandler: (msg: Message, cb: ICallback<void>) => void
  protected consumer: Consumer;

  constructor() {
    this.consumer = new Consumer()
  }
  listen(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.consumer.consume(
        this.queueName,
        this.messageHandler,
        (err) => {
          if (err) console.log(err)
          reject()
        }
      )
      resolve()
    })
    this.consumer.run()
  }
}

class CommentCreatedConsumer extends CustomComsumer<CommentCreatedEvent>{
  queueName: Subjects.CommentCreated = Subjects.CommentCreated;
  messageHandler: (msg: Message, cb: ICallback<void>) => void = async (msg, cb) => {
    const payload = msg.getBody()
    console.log('Message payload ', payload)
    cb()
  }
}
// const a = new CommentCreatedConsumer()
// a.listen()